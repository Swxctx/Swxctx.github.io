<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Swxctx</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.swxctx.top/"/>
  <updated>2018-03-26T11:02:38.000Z</updated>
  <id>http://www.swxctx.top/</id>
  
  <author>
    <name>Swxctx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Golang实现简单的邮件发送</title>
    <link href="http://www.swxctx.top/2018/03/26/Golang%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <id>http://www.swxctx.top/2018/03/26/Golang实现简单的邮件发送/</id>
    <published>2018-03-26T10:44:28.000Z</published>
    <updated>2018-03-26T11:02:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><ul><li>Golang中提供了net/smtp包提供邮件的发送功能，但是在目前已经有了封装成熟的邮件发送包-Gomail，<a href="https://github.com/go-gomail/gomail" target="_blank" rel="noopener">点击此处访问项目GitHub</a>.</li><li>在之前的一篇CSDN博客中，我详细的描述过Java对邮件发送、接收以及转发等操作，<a href="https://blog.csdn.net/qq_28796345/article/details/53366324" target="_blank" rel="noopener">点击此处访问Java Mail详解</a>，所以在这里也不再讲述SMTP以及POP这些邮件协议，直接通过通过gomail包来发送邮件.<a id="more"></a></li></ul><h3 id="Goloang-gomail"><a href="#Goloang-gomail" class="headerlink" title="Goloang-gomail"></a>Goloang-gomail</h3><p>使用gomail包来进行邮件发送时，操作很简单，只需要调用设置好消息体以及通过认证就可以进行邮件的发送，代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line"></span><br><span class="line">&quot;gopkg.in/gomail.v2&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">m := gomail.NewMessage()</span><br><span class="line">// 发件人</span><br><span class="line">m.SetAddressHeader(&quot;From&quot;, &quot;swxctx@sina.com&quot;, &quot;Golang-Mail-Test&quot;)</span><br><span class="line">// 收件人</span><br><span class="line">m.SetHeader(&quot;To&quot;, m.FormatAddress(&quot;swxctx@sina.cn&quot;, &quot;go-mail&quot;))</span><br><span class="line">// 主题</span><br><span class="line">m.SetHeader(&quot;Subject&quot;, &quot;Gomail&quot;)</span><br><span class="line">// 发送的body体</span><br><span class="line">m.SetBody(&quot;text/html&quot;, &quot;&lt;h4&gt;我的测试邮件&lt;h4&gt;&lt;a href = \&quot;http://www.swxctx.top\&quot;&gt;看看我的网站&lt;/a&gt;&quot;)</span><br><span class="line"></span><br><span class="line">// 发送邮件服务器、端口、发件人账号、发件人密码</span><br><span class="line">d := gomail.NewPlainDialer(&quot;smtp.sina.com&quot;, 25, &quot;swxctx@sina.com&quot;, &quot;****&quot;)</span><br><span class="line">if err := d.DialAndSend(m); err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(&quot;mail send success...&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里只需要关注于body体的编写，这里可以使用多种Content-type，比如text/html、string等。</p><p>发送成功如图所示：<br><img src="/2018/03/26/Golang实现简单的邮件发送/gmail.png" alt="mail"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Golang中提供了net/smtp包提供邮件的发送功能，但是在目前已经有了封装成熟的邮件发送包-Gomail，&lt;a href=&quot;https://github.com/go-gomail/gomail&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击此处访问项目GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;在之前的一篇CSDN博客中，我详细的描述过Java对邮件发送、接收以及转发等操作，&lt;a href=&quot;https://blog.csdn.net/qq_28796345/article/details/53366324&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击此处访问Java Mail详解&lt;/a&gt;，所以在这里也不再讲述SMTP以及POP这些邮件协议，直接通过通过gomail包来发送邮件.&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="gloang" scheme="http://www.swxctx.top/categories/gloang/"/>
    
    
      <category term="各语言邮件发送" scheme="http://www.swxctx.top/tags/%E5%90%84%E8%AF%AD%E8%A8%80%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>Golang实现的简单爬虫</title>
    <link href="http://www.swxctx.top/2018/02/11/Golang%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/"/>
    <id>http://www.swxctx.top/2018/02/11/Golang实现的简单爬虫/</id>
    <published>2018-02-11T10:04:40.000Z</published>
    <updated>2018-02-11T11:00:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>今天在工作上面需要用到爬虫抓取部分信息，之前用Python实现了CSDN博客的抓取，后想到了目前整天面对的Golang，便摸索了一下，实现了一个简单的抓取豆瓣排行的爬虫，主要分为下面几个步骤.</p><ul><li>发起Http请求</li><li>解析Html元素</li><li>存储抓取到的数据<a id="more"></a></li></ul><h3 id="发起http请求"><a href="#发起http请求" class="headerlink" title="发起http请求"></a>发起http请求</h3><p>在请求方面，直接采用的Golang的”net/http”包来进行开发，步骤如下:</p><ul><li>初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client := &amp;http.Client&#123;&#125;</span><br><span class="line">req, err := http.NewRequest(&quot;GET&quot;, swoop.url, nil)</span><br></pre></td></tr></table></figure><ul><li>set请求信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for key, value := range swoop.header &#123;</span><br><span class="line">    req.Header.Add(key, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>发起请求</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resp, err := client.Do(req)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    log.Fatalf(&quot;do client err-&gt;%v&quot;, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接收响应</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body, err := ioutil.ReadAll(resp.Body)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">    log.Fatalf(&quot;read resp err-&gt;%v&quot;, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析Html元素"><a href="#解析Html元素" class="headerlink" title="解析Html元素"></a>解析Html元素</h3><ul><li>设置参数并请求<br>首先需要定义个设置参数结构体，便于操作:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type Swoop struct &#123;</span><br><span class="line">    url    string</span><br><span class="line">    header map[string]string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置参数后发起请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url := &quot;https://movie.douban.com/top250?start=&quot; + strconv.Itoa(i*25)</span><br><span class="line">swoop := &amp;Swoop&#123;url, header&#125;</span><br><span class="line">html := swoop.get_html_header()</span><br></pre></td></tr></table></figure></p><ul><li>解析Html元素<br>发起请求后，接收到Html元素，接下来需要做的就是解析Html元素，将其转化为我们想要的格式，解析Html格式需要到页面浏览器查看对应的Html元素后再做操作：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//评价人数</span><br><span class="line">commentCount := `&lt;span&gt;(.*?)评价&lt;/span&gt;`</span><br><span class="line">rp2 := regexp.MustCompile(commentCount)</span><br><span class="line">txt2 := rp2.FindAllStringSubmatch(html, -1)</span><br><span class="line"></span><br><span class="line">//评分</span><br><span class="line">pattern3 := `property=&quot;v:average&quot;&gt;(.*?)&lt;/span&gt;`</span><br><span class="line">rp3 := regexp.MustCompile(pattern3)</span><br><span class="line">txt3 := rp3.FindAllStringSubmatch(html, -1)</span><br><span class="line"></span><br><span class="line">//电影名称</span><br><span class="line">pattern4 := `img width=&quot;(.*?)&quot; alt=&quot;(.*?)&quot; src=`</span><br><span class="line">rp4 := regexp.MustCompile(pattern4)</span><br><span class="line">txt4 := rp4.FindAllStringSubmatch(html, -1)</span><br></pre></td></tr></table></figure><p>如下Html页面代码，其中评价包含在”&lt;\span&gt;”标签内，所以在解析的时候需要解析&lt;\span&gt;标签:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;star&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;rating5-t&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;9.5&lt;/span&gt;</span><br><span class="line">    &lt;span property=&quot;v:best&quot; content=&quot;10.0&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;702861人评价&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>如下页面代码，包含了width、alt、src三个value，则需要拿到title就需要解析&lt;\img&gt;标签后读取第二个value值，即alt<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img width=&quot;100&quot; alt=&quot;这个杀手不太冷&quot; src=&quot;https://img3.doubanio.com/view/photo/s_ratio_poster/public/p511118051.jpg&quot; class=&quot;&quot;&gt;</span><br></pre></td></tr></table></figure></p><ul><li>运行代码后效果如下<br>运行中:<br><img src="/2018/02/11/Golang实现的简单爬虫/2_run.png" alt="run"></li></ul><p>运行结束:<br><img src="/2018/02/11/Golang实现的简单爬虫/2_result.png" alt="result"></p><h3 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h3><p>数据存储一般根据自己的需要来做，我这里采用的是csv文件存储.<br>如下所示:<br><img src="/2018/02/11/Golang实现的简单爬虫/2_print.png" alt="print"></p><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p><a href="https://github.com/Swxctx/mygo/tree/master/swoop/douban" target="_blank" rel="noopener">源代码链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h3&gt;&lt;p&gt;今天在工作上面需要用到爬虫抓取部分信息，之前用Python实现了CSDN博客的抓取，后想到了目前整天面对的Golang，便摸索了一下，实现了一个简单的抓取豆瓣排行的爬虫，主要分为下面几个步骤.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;发起Http请求&lt;/li&gt;
&lt;li&gt;解析Html元素&lt;/li&gt;
&lt;li&gt;存储抓取到的数据&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="golang" scheme="http://www.swxctx.top/categories/golang/"/>
    
    
      <category term="Golang" scheme="http://www.swxctx.top/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>First Content</title>
    <link href="http://www.swxctx.top/2018/01/24/first-blog/"/>
    <id>http://www.swxctx.top/2018/01/24/first-blog/</id>
    <published>2018-01-24T06:08:20.000Z</published>
    <updated>2018-01-24T10:32:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><p>该网站主要用于记录日常工作及学习中的一些知识点及简要代码，主要包含如下几类。</p><ul><li>Golang</li><li>C</li><li>C++</li><li>Java</li><li>机器学习</li><li>日常算法及文章分享</li><li>Linux编程及日常服务器维护<a id="more"></a>如果有错误或不好的地方可通过’关于我’页面的联系方式与我联系，或者点击文章下方进行评论。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;序言&quot;&gt;&lt;a href=&quot;#序言&quot; class=&quot;headerlink&quot; title=&quot;序言&quot;&gt;&lt;/a&gt;序言&lt;/h3&gt;&lt;p&gt;该网站主要用于记录日常工作及学习中的一些知识点及简要代码，主要包含如下几类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Golang&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;机器学习&lt;/li&gt;
&lt;li&gt;日常算法及文章分享&lt;/li&gt;
&lt;li&gt;Linux编程及日常服务器维护&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="base" scheme="http://www.swxctx.top/categories/base/"/>
    
    
      <category term="基础" scheme="http://www.swxctx.top/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
